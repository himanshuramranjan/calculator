> Design approach

The core idea is:
Numbers are treated as leaf nodes.
Operations like addition and multiplication are composite nodes that can contain other expressions.
All nodes implement a common interface Expression, so they can be recursively composed and evaluated.

Expression (interface)
│
├── Number          (Leaf)         → holds a numeric value
│
└── Operation       (Abstract Composite)
     ├── Addition         (Concrete Composite)
     └── Multiplication   (Concrete Composite)

               (*)
              /   \
            (+)    2
           /   \
         10     5

> Other example following the same design pattern

| Example                | Component Interface | Leaf         | Composite | Use Case                             |
| ---------------------- | ------------------- | ------------ | --------- | ------------------------------------ |
| File System            | FileSystemEntity    | File         | Directory | Size calculation, search             |
| HTML Document Renderer | HTMLElement         | Text, Image  | Div, Body | Recursive DOM rendering              |
| Organization Hierarchy | Employee            | Developer    | Manager   | Salary, reporting structure          |
| Graphics Editor        | Graphic             | Circle, Rect | Group     | Drawing complex nested graphics      |
| UI Menu System         | MenuComponent       | MenuItem     | Menu      | Rendering nested menus, user actions |



> Future enhancement for the design

| Enhancement                      | Description                                                                                        |
| -------------------------------- | -------------------------------------------------------------------------------------------------- |
| **Support for Unary Operations** | Add support for unary minus, square root, etc.                                                     |
| **Expression Parsing**           | Build expressions from strings like `"10 + 5 * 2"` using parser logic (can be a separate utility). |
| **Evaluation Context**           | Add context-aware evaluation later if you introduce variables.                                     |
